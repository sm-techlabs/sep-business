name: Build and Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      # --- Checkout code ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Build & Package ---
      - name: Build and package release
        run: |
          set -e
          echo "üì¶ Building release for environment: ${{ inputs.environment }}"

          # Prepare directories
          mkdir -p release_bundle/frontend release_bundle/backend

          # Inject API_BASE_URL into frontend config
          echo "üîß Injecting API base URL..."
          cd frontend
          sed -i "s#__API_BASE_URL__#${{ vars.API_BASE_URL }}#" src/config.js
          echo "‚úÖ Using API URL:" && cat src/config.js

          # Build frontend
          echo "üèóÔ∏è Building frontend..."
          npm ci
          npm run build
          cd ..

          # Copy built frontend contents
          cp -r frontend/dist release_bundle/frontend/

          # Copy backend code
          cp -r backend/* release_bundle/backend/

          # Package everything
          echo "üóúÔ∏è Packaging release bundle..."
          tar -czf release.tar.gz -C release_bundle .
          echo "‚úÖ Release packaged as release.tar.gz"

      # --- Copy to VM ---
      - name: Copy release tarball to remote server
        run: |
          echo "üîë Preparing SSH key..."
          echo "${{ secrets.SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          echo "üöÄ Copying release.tar.gz to remote host..."
          scp -o StrictHostKeyChecking=no -i private_key.pem \
            release.tar.gz \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/release.tar.gz

      # --- Deploy remotely ---
      - name: Run remote deployment
        run: |
          echo "‚öôÔ∏è Starting remote deployment..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
              set -e
              cd /home/${USER}

              echo "üìÇ Extracting release tarball..."
              tar -xzf release.tar.gz
              rm release.tar.gz

              echo "üì¶ Deploying to /opt/sep-business..."
              sudo mkdir -p /opt/sep-business
              sudo rm -rf /opt/sep-business/frontend /opt/sep-business/backend
              sudo mv frontend backend /opt/sep-business/

              echo "üì¶ Installing backend dependencies..."
              cd /opt/sep-business/backend
              npm ci --omit=dev

              echo "üîÑ Restarting backend service..."
              sudo systemctl daemon-reload
              sudo systemctl restart sep-business-backend
              sudo systemctl status sep-business-backend --no-pager

              echo "‚úÖ Deployment successful at $(date)" | sudo tee /opt/sep-business/DEPLOY_LOG.txt

              # Cleanup
              cd /home/${USER}
              rm -rf frontend backend || true
          EOF
